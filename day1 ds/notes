 @param {number} totalCandies
 * @param {number[]} candies
 * @param {number} i
 * @return {boolean}
 */
// // time complexity: O(N)
// var isGreater = function(totalCandies, candies, i){
//     // assume that the totalCandies is greater than all the other kids candies except index i <- assumption
//     let assumption = true;

//     // iterate / traverse the candies array <- index
//     for(let index=0; index<candies.length; index++){
//         // except the index i
//         if(index != i){
//             // check if whether the totalCandies is less than the candies[index]
//             // if true => update the assumption
//             if(totalCandies < candies[index]){
//                 assumption = false;
//             }
//         }
//     }

//     // return the assumption
//     return assumption;
// }

// // time complexity: O(N)
// var isGreater = function(totalCandies, candies, i){
//     // assume that the totalCandies is greater than all the other kids candies except index i <- assumption
//     let assumption = true;

//     // iterate / traverse the candies array <- index
//     for(let index=0; index<candies.length; index++){
//         // check if whether the totalCandies is less than the candies[index]
//         // if true => update the assumption
//         if(totalCandies < candies[index]){
//             assumption = false;
//         }
//     }
//     // return the assumption
//     return assumption;
// }

// // time complexity: O(N)
// var isGreater = function(totalCandies, candies, i){
//     // assume that the totalCandies is greater than all the other kids candies except index i <- assumption
//     let assumption = true;

//     // iterate / traverse the candies array <- index
//     for(let index=0; index<candies.length; index++){
//         // check if whether the totalCandies is less than the candies[index]
//         // if true => update the assumption
//         if(totalCandies < candies[index]){
//             assumption = false;
//             break;
//         }
//     }
//     // return the assumption
//     return assumption;
// }


// // time complexity: O(N)
// var isGreater = function(totalCandies, candies, i){
//     // iterate / traverse the candies array <- index
//     for(let index=0; index<candies.length; index++){
//         // check if whether the totalCandies is less than the candies[index]
//         // if true => update the assumption
//         if(totalCandies < candies[index]){
//             return false;
//         }
//     }
//     // return the assumption
//     return true;
// }


/**
 * @param {number[]} candies
 * @param {number} extraCandies
 * @return {boolean[]}
 */
// // time complexity: O(N^2)
// var kidsWithCandies = function(candies, extraCandies) {
//     // create an empty boolean array <- result
//     let result = [];

//     // traverse/iterate the candies array <- i = 0 to candies.length - 1
//     for(let i=0; i<candies.length; i++){
//         // find the total candies <- totalCandies
//         let totalCandies = candies[i] + extraCandies;

//         // compare the totalCandies with all the other kids candies
//         if(isGreater(totalCandies, candies, i)){
//             // if all the kids candies are lesser than the totalCandies
//             // push true to the result array
//             result.push(true);
//         } else {
//             // else push false to the result array
//             result.push(false);
//         }
//     }

//     // return the result array
//     return result;
// };

// // time complexity: O(N^2)
// var kidsWithCandies = function(candies, extraCandies) {
//     // create an empty boolean array <- result
//     let result = [];

//     // traverse/iterate the candies array <- i = 0 to candies.length - 1
//     for(let i=0; i<candies.length; i++){
//         // find the total candies <- totalCandies
//         let totalCandies = candies[i] + extraCandies;

//         // find the greatest candy <- greatestCandy
//         let greatestCandy = Math.max(...candies);

//         // compare the totalCandies with all the other kids candies
//         if(totalCandies >= greatestCandy){
//             // if all the kids candies are lesser than the totalCandies
//             // push true to the result array
//             result.push(true);
//         } else {
//             // else push false to the result array
//             result.push(false);
//         }
//     }

//     // return the result array
//     return result;
// };

// // time complexity: O(N)
// var kidsWithCandies = function(candies, extraCandies) {
//     // create an empty boolean array <- result
//     let result = [];

//     // find the greatest candy <- greatestCandy
//     let greatestCandy = Math.max(...candies);

//     // traverse/iterate the candies array <- i = 0 to candies.length - 1
//     for(let i=0; i<candies.length; i++){
//         // find the total candies <- totalCandies
//         let totalCandies = candies[i] + extraCandies;

//         // compare the totalCandies with all the other kids candies
//         if(totalCandies >= greatestCandy){
//             // if all the kids candies are lesser than the totalCandies
//             // push true to the result array
//             result.push(true);
//         } else {
//             // else push false to the result array
//             result.push(false);
//         }
//     }

//     // return the result array
//     return result;
// };

// // time complexity: O(N)
// var kidsWithCandies = function(candies, extraCandies) {
//     let result = [];
//     let greatestCandy = Math.max(...candies);

//     candies.forEach((candy) => {
//         result.push(candy + extraCandies >= greatestCandy);
//     });

//     return result;
// };

// // time complexity: O(N)
// var kidsWithCandies = function(candies, extraCandies) {
//     let result = [];
//     let greatestCandy = Math.max(...candies);

//     candies.forEach(candy => result.push(candy + extraCandies >= greatestCandy));

//     return result;
// };

// // time complexity: O(N^2)
// var kidsWithCandies = function(candies, extraCandies) {
//     let result = [];
//     candies.forEach(candy => result.push(candy + extraCandies >= Math.max(...candies)));
//     return result;
// };

// // time complexity: O(N^2)
// var kidsWithCandies = function(candies, extraCandies) {
//     let result = [];
//     result = candies.map(candy => candy + extraCandies >= Math.max(...candies));
//     return result;
// };

// // time complexity: O(N^2)
// var kidsWithCandies = function(candies, extraCandies) {
//     return candies.map(candy => candy + extraCandies >= Math.max(...candies));
// };

// time complexity: O(N)
var kidsWithCandies = function(candies, extraCandies) {
    let greatestCandy = Math.max(...candies);
    return candies.map(candy => candy + extraCandies >= greatestCandy);
};

/*
    1. Problem Understanding
    candies = [2, 3, 5, 1, 3]
            i [0][1][2][3][4]
    extraCandies = 3
    result =  [T, T, T, F, T]
            i [0][1][2][3][4]
    kid @ index 0
    i = 0
        totalCandies = candies[i] + extraCandies
                     = candies[0] + extraCandies
                     = 2 + 3
                     = 5 >= [3, 5, 1, 3]
                           [1][2][3][4]
        5 >= 3 T
        5 >= 5 T
        5 >= 1 T
        5 >= 3 T
    
    i = 1
        totalCandies = candies[1] + extraCandies
                     = 3 + 3
                     = 6 >= [2, 5, 1, 3]
                            [0][2][3][4]
    i = 2
        totalCandies = candies[2] + extraCandies
                     = 5 + 3
                     = 8 >= [2, 3, 1, 3]
                            [0][1][3][4]
    
    i = 3
        totalCandies = candies[3] + extraCandies
                     = 1 + 3
                     = 4 >= [2, 3, 5, 3]
                            [0][1][2][4]
        
    i = 4
        totalCandies = candies[4] + extraCandies
                     = 3 + 3
                     = 6 >= [2, 3, 5, 1]
                            [0][1][2][3]
    
    2. Algorithm
    a. create an empty boolean array <- result
    b. traverse/iterate the candies array <- i = 0 to candies.length - 1
        find the total candies <- totalCandies
        compare the totalCandies with all the other kids candies
            if all the kids candies are lesser than the totalCandies
            push true to the result array
            else push false to the result array
    
    c. return the result array
    3. Implementation
*/
 25 changes: 25 additions & 0 deletions25  
day2/forEach.js
@@ -0,0 +1,25 @@
// let numbers = [1, 2, 3, 4, 5];

// for (let i = 0; i < numbers.length; i++){
//     console.log(numbers[i]);
// }

// let printNumber = (value) => {
//     console.log(value);
// }

// numbers.forEach(printNumber);

// numbers.forEach((value) => {
//     console.log(value);
// });

// numbers.forEach((value) => console.log(value));

let numbers = [1, 2, 3, 4, 5];

let squares = numbers.map((value) => {
    return value ** 2;
});

console.log(squares);
 168 changes: 168 additions & 0 deletions168  
day2/timeComplexities.js
@@ -0,0 +1,168 @@
/*
    Either to compare one algorithm with another algorithm or to evaluate the performance of a single algorithm
        - time complexity
        - space complexity
    
    time complexity => amount of time taken by an algorithm to run!
    space complexity => amount of memory taken by an algorithm to run!
    Mathematical Notations: Asymptotic Notations
    1. Big - 'O' (Big Oh) - upper bound
    2. Big - 'Ω' (Big Omega) - lower bound
    3. Big - 'Θ' (Big Theta) - tight bound
    Situations/Cases: (Inputs)
    1. Worst Case
    2. Best Case
    3. Average Case
    time complexity: upper bound, worst case - Big - 'O'
    Example:
    Algorithm: Linear Search
    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    Case (first element): If the key = 1, Comparisons => 1, Best Case => O(1) - abbr: Order of 1
    Case (middle element): If the key = 5, Comparisons => 5, Average Case => O(N/2) => O(N)
    Case (last element): If the key = 10, Comparisons => 10, Worst Case => O(N)
         (element not present): If the key = 11, Comparisons => 10, Worst Case => O(N)
*/

/*
    let a = 0, b = 0;
    for (i = 0; i < N; i++) {
        a = a + rand();
    }
    for (j = 0; j < M; j++) {
        b = b + rand();
    }
    time complexity: O(N+M)
    Options:
    O(1)
    O(logN)
    O(N)
    O(N logN)
    O(N^2)
    O(N^2 logN)
    O(N^3)
    O(N^3 logN)
    O(2^N)
    O(N!)
    Answer:
    let a = 0, b = 0; // declarations, initializations, conditionals, expressions, assignments
    => O(1), Constant time
    for (i = 0; i < N; i++) {
        a = a + rand();
    }
    total executions = values of i
    i = 0, 1, 2, 3, 4, 5 ,...., N-1 => N
    for (j = 0; j < M; j++) {
        b = b + rand();
    }
    total executions = values of j
    j = 0, 1, 2, 3, 4, 5, ....., M-1 => M
    total time complexity = T(N, M) = 1 + N + M
                                    = N + M (Since 1 is constant)
                                    = O(N + M)
    
*/

/*
    let a = 0, b = 0;
    let M = 2N;
    for (i = 0; i < N; i++) {
        a = a + rand();
    }
    for (j = 0; j < M; j++) {
        b = b + rand();
    }
    time complexity, T(N) = 1 + N + M
                          = 1 + N + 2N
                          = 1 + 3N
                          = 3N
                          = O(N)
*/

/*
    let a = 0, b = 0;
    for (i = 0; i < N; i++) {
        a = a + rand();
        for (j = 0; j < N; j++) {
            b = b + rand();
        }
    }
    time complexity: O(N*M), O(N^2)
    T(N) = 1 + N * N
         = N^2
         = O(N^2)
    Answer:
    1. Make some assumptions for N
    N = 4
        i = 0; j = 0, 1, 2, 3 => 4 times
        i = 1; j = 0, 1, 2, 3 => 4 times
        i = 2; j = 0, 1, 2, 3 => 4 times
        i = 3; j = 0, 1, 2, 3 => 4 times
        total executions = 4 + 4 + 4 + 4
                         = 16
    N = 5
        i = 0; j = 0, 1, 2, 3, 4 => 5
        i = 1; j = 0, 1, 2, 3, 4 => 5
        i = 2; j = 0, 1, 2, 3, 4 => 5
        i = 3; j = 0, 1, 2, 3, 4 => 5
        i = 4; j = 0, 1, 2, 3, 4 => 5
        total executions = 5 + 5 + 5 + 5 + 5
                         = 25
    N = 6
    2. Summarize & pattern identification
    For N = 4, executions = 16
    For N = 5, executions = 25
    For N = 6, executions = 36
    executions = N^2
    3. Calculate total time complexity
    
    total time complexity, T(N) = 1 + N^2
                                = O(N^2)
*/

/*
    Homework:
    let a = 0;
    for (i = 0; i < N; i++) {
        for (j = N; j > i; j--) {
            a = a + i + j; 
        }
    }
*/

/*
assumucation for N

 N = 4
 j=4;4>1;i++;
        i = 0; j = 4, 3, 2, 1 => 4 times
        i = 1; j = 4, 3, 2,  => 3 times
        i = 2; j = 4, 3, 2,  => 2 times
        i = 3; j = 4, 3,  =>  times
        total executions = 4 + 3 + 2+ 1
                         = 10

N=5

        i = 0; j =5. 4, 3, 2, 1 => 5 times     
        i = 1; j =5, 4, 3, 2,  => 4 times
        i = 2; j =5, 4, 3,   => 3times
        i = 3; j =5, 4,   => 2 times
        i=4;j=5 =>1 times
        total executions =5+ 4 + 3 + 2+ 1
                         = 15
  N=6      
         i = 0; j =6,5, 4, 3, 2, 1 => 6 times     
        i = 1; j =,6,5, 4, 3, 2,  => 5 times
        i = 2; j =6,5, 4, 3,   => 4 times
        i = 3; j =6,5, 4,   => 3 times
        i=4;j=6,5  => 2 times
        i=5;j =6,  =>1times

        total executions =+6+5+ 4 + 3 + 2+ 1
                         = 21


   
total excution of assusmation:T(N)=sum of first n natural number
                                 =N + N-1 + N-2 +N-3+.......+1
                                =(N * (N+1))/2

total time complexityT(N) = 1 + [N*(N-1)]/2 
                          =1/2 * [N*(N+1)]
                          =N^2 + N
                          =N^2[since N^2is the hightest degree polynomia]
                          =O(N^2)

example:2
      let i,j,k = 0;
      for(i=n/2; i<=n; i++){
        for(j=2; j<=n; j=j*2){
            k = k + n/2;
        }
      }

outer loop:
N=6       i=3,4,5,6  = 4 excuction    (i=6/2;i<=6;i++)
n =5      i=2.5,3.5,4.5 =3excution

excution = N/2+1

inner loop

N=10 j=2,4,8  exc=3
N=29 j=2,4,8,16 exc=4
N=30 j=2,4,8,16 exc=4
N=31 j=2,4,8,16 exc=4
N40 j=2,4,8,16,32 exc=5

2^x =N (x is unknow,solve for x)
apply log2 on both side.
log2(2^x)=log2(N)
xlog2(2)=log2(N) [since loga(b^x)=xloga(b)]
x*1=log2(N);
x=log2(N);

total time complexity T(N) = 1 + (N/2+1) * log(N)
                           =N/2 * logN + logN
                            =1/2 * N *logN+logN
                           =N*logN + logN
                           =N logN
                           =O(NlogN)

   //[since 2,4,8,16,33 incres the value mean ==logN]
   //[since 32,16,8,4,2 decres the value mean ==logN] 
                          


console.log('N = ${10},excutions = ${Math.log2(10}');
console.log('N = ${100},excutions = ${Math.log2(100}');
console.log('N = ${90},excutions = ${Math.log2(90}');


O(2^N)
    Problem: Given an array of values, how many ways we can select the values from the array and print each way separately.
    Input: [1, 2, 3]
    Output: 
    0 values => ()
    1 values => (1), (2), (3)
    2 values => (1, 2), (1, 3), (2, 3)
    3 values => (1, 2, 3)
    number of ways = 8
    Input: [1, 2, 3, 4]
    Output:
    0 values => ()
    1 values => (1), (2), (3), (4)
    2 values => (1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)
    3 values => (1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)
    4 values => (1, 2, 3, 4)
    executions = 16
    N = 3, executions = 8
    N = 4, executions = 16
    N = 5, executions = 32
    2^N
*/

/*
    O(N!)
    Problem: Given a string S, find how many ways we can re-arrange the characters to form a new word and print those words.
    Input: abc
    Output:
    abc
    acb
    bac
    bca
    cab
    cba
    number of ways = 6
    Input: ab
    Output:
    ab
    ba
    number of ways = 2
    Input: abcd
    Output:
    abcd
    abdc
    acbd
    acdb
    badc
    bacd
    bcda
    cabd
    cbda
    cbad
    ....
    ....
    number of ways = 24
    N = 2, number of ways = 2
    N = 3, number of ways = 6
    N = 4, number of ways = 24
    N! = N * N-1 * N-2 * N-3 * ..... * 1
    6! = 6 * 5 * 4 * 3 * 2 * 1 = 720 ways
    O(N!)
*/
 
/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[]}
 */
// var twoSum = function(nums, target) {
//     for(let i=0; i<nums.length-1; i++){
//         for(let j=i+1; j<nums.length; j++){
//             if(nums[i] + nums[j] == target){
//                 return [i, j];
//             }
//         }
//     }
// };

var twoSum = function(nums, target) {
    let indexedNums = [];















// class Car{
    drive(){
     console.log("Driving the car")
    }
    brake(){
     console.log("applying the brake")
    }
}
//we are creating a car object using car class
let car1 = new Car() // let car = new classname()
car1.drive();
car1.brake();



function Naturalnum(N) {
    console.log(N);
}
Naturalnum(3)